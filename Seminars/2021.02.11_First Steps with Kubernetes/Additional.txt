	
		
		Конейнерите за изолирани процеси - виртуализират софтуерна система
		
		От image-те стартираме контейнерите
		
		Виртуални машини -> виртуализират хардуер
		
		Оркестриране на конейнери -> управление на контейнерите - кога, къде тези контейнери се изпълняват, размножаването им
		
		Клъстерите са съставени от хостове (участници)
		
		Nodes -> container runtime
		
		Pod -> онова, което ние подаваме за изпълнение на node-вете. В pod обикновено имаме един, но можем да имаме повече 
		от един конейнер. Всеки pod има собствен ip адрес и конейнерите, които работят в този pod споделят този ip адрес.
		Pod-овете се явяват най-малката единица работа, която ние подаваме на нашия клъстер да изпълнява
		
		Microservices -> 
		
		Кубернетис управлява клъстер, като клъстера можем да го разделим на няколко на брой виртуални клъстера
		
		Важно е контейнерите да можем да ги скалираме -> вертикално и хоризонтално - т.е. да увеличаваме тяхната бройка 
		или респективно да ги намаляваме - скалируемост
		
		Deployment -> в тях се съдържат replica sets and nodes. Deployment се явява едно от най-високите нива за единица работа.
		Deployment-ите ни позволяват да изпълняваме ъпдейти или rollback-ове, ако е необходимо.
		При deploy -> нещата се подновяват така, че приложение да няма down time, т.е. да спре. Подменят се, докато приложението работи. 
		
		Декларативно дефиниране -> искам да постигнеш дадено нещо

		императивно дефиниране -> последователно правя определени неща, за да постигна желаното
		
		Kubectl -> command line инструмент
		
		Hypervisor - примерно Virtual Box
		
		Netflix използват контейнерни технологии
		При получаване на данни от гугъл, същите използват контейнеризация - съответно оркестрация
		
		Python скриптов език ли е?
		
		
		Flow-а на командите е следния: kubectl - задаваме действие - категория на ресурса - име на ресурса. Това е при 
		всяко изпълнение на командата на kubernetes. Това е форматът на командите
		
		
		
		
		